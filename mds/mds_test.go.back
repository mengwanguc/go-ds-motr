package mds


import (
    "bytes"
    "testing"
    "motr/mio"
    "fmt"
    ds "github.com/ipfs/go-datastore"

    dstest "github.com/ipfs/go-datastore/test"
    dsq "github.com/ipfs/go-datastore/query"
)



// returns datastore, and a function to call on exit.
// So this will be:
//
//   d, done := newDS(t)
//   defer done()
func newDS(t *testing.T) (*MotrDS, func()) {
    config := mio.Config{
        LocalEP:    "10.52.0.244@tcp:12345:33:1000",
        HaxEP:      "10.52.0.244@tcp:12345:34:1",
        Profile:    "0x7000000000000001:0",
        ProcFid:    "0x7200000000000001:64",
        TraceOn:    false,
        Verbose:    false,
        ThreadsN:   1,
    }
    indexID := "0x7800000000000001:123456701"
    motrds, err := Open(config, indexID)
    if err != nil {
        t.Fatal("Failed to open index.. error: ", err)
    }
    return motrds, func() {
        // query
        rs, err := motrds.Query(dsq.Query{Prefix: "/"})
        actual, err := rs.Rest()
        if err != nil {
            t.Fatal(err)
        }

        fmt.Println("actual length", len(actual))

        for _, e := range actual {
            fmt.Println(e.Key)
        }
        motrds.Mkv.Close()
    }
}


func TestBasicOperations(t *testing.T) {
    motrds, done := newDS(t)
    defer done()

    // test from go-datastore
    t.Run("basic put get", func(t *testing.T) {
        dstest.SubtestBasicPutGet(t, motrds)
    })


    t.Run("not founds", func(t *testing.T) {
        dstest.SubtestNotFounds(t, motrds)
    })

    t.Run("Basic sync", func(t *testing.T) {
        dstest.SubtestBasicSync(t, motrds)
    })
}

func TestReturnSizes(t *testing.T) {
    motrds, done := newDS(t)
    defer done()

    t.Run("Return sizes, query", func(t *testing.T) {
        dstest.SubtestReturnSizes(t, motrds)
    })
}


func TestQuery(t *testing.T) {
    motrds, done := newDS(t)
    defer done()


    t.Run("many puts and gets, query", func(t *testing.T) {
        dstest.SubtestManyKeysAndQuery(t, motrds)
    })

    t.Run("Prefix test, query", func(t *testing.T) {
        dstest.SubtestPrefix(t, motrds)
    })

    t.Run("Order test, query", func(t *testing.T) {
        dstest.SubtestOrder(t, motrds)
    })

    t.Run("Filter test, query", func(t *testing.T) {
        dstest.SubtestFilter(t, motrds)
    })



}


func TestSimpleBatch(t *testing.T) {
    motrds, done := newDS(t)
    defer done()







    t.Log("starting putting 2 values")

    k := ds.NewKey("foo")
    val := []byte("Hello Datastore!")


    k2 := ds.NewKey("ddd")
    val2 := []byte("Hello Datastore!")

    bt, err := motrds.Batch()
    bt.Put(k, val)
    bt.Put(k2, val)
    bt.Commit()

    t.Log("values committed")
    

    getval,err := motrds.Get(k)

    if err != nil {
        t.Fatal("errr getting value of key foo from datastore: ", err)
    }

    if !bytes.Equal(getval, val) {
        t.Fatal("value received on get for key foo wasnt what we expected:", string(getval))
    }

    getval2,err := motrds.Get(k2)

    if err != nil {
        t.Fatal("errr getting value of key ddd from datastore: ", err)
    }

    if !bytes.Equal(getval2, val2) {
        t.Fatal("value received on get for key ddd wasnt what we expected:", string(getval2))
    }

    t.Log("Successfully get values")


    bt.Delete(k)
    bt.Delete(k2)
    bt.Commit()


    fmt.Println("Delete values and commit")

    have, err := motrds.Has(k)
    if err != nil {
        t.Fatal("error calling has on key foo after delete", err)
    }

    if have {
        t.Fatal("should deleted key foo, has returned true")
    }

    have, err = motrds.Has(k2)
    if err != nil {
        t.Fatal("error calling has on key ddd after delete", err)
    }

    if have {
        t.Fatal("should deleted key ddd, has returned true")
    }

    fmt.Println("values are successfully deleted")
}


func TestBatch(t *testing.T) {
    motrds, done := newDS(t)
    defer done()

    t.Run("batch test", func(t *testing.T) {
        dstest.RunBatchTest(t, motrds)
    })
}

func MengTestSimple(t *testing.T, motrds ds.Datastore) {

    k := ds.NewKey("foo")
    val := []byte("Hello Datastore!")

    err := motrds.Put(k, val)
    if err != nil {
        t.Fatal("error putting foo to datastore: ", err)
    }


    getval,err := motrds.Get(k)

    if err != nil {
        t.Fatal("errr getting value of key foo from datastore: ", err)
    }

    if !bytes.Equal(getval, val) {
        t.Fatal("value received on get for key foo wasnt what we expected:", string(getval))
    }


    have, err := motrds.Has(k)
    if err != nil {
        t.Fatal("error calling has on key foo ", err)
    }

    if !have {
        t.Fatal("should have key foo, has returned false")
    }

    size, err := motrds.GetSize(k)
    if err != nil {
        t.Fatal("error calling GetSize on key foo ", err)
    }

    if size != len(val) {
        t.Fatal("should have size ", len(val) , "GetSize returned ", size)
    }






    newk := ds.NewKey("ddd")

    have, err = motrds.Has(newk)
    if err != nil {
        t.Fatal("error calling has on key ddd ", err)
    }

    if have {
        t.Fatal("shouldn't have key ddd, has returned true")
    }


    

    err = motrds.Put(newk, val)
    if err != nil {
        t.Fatal("error putting ddd to datastore: ", err)
    }


    // query
    rs, err := motrds.Query(dsq.Query{Prefix: "/"})
    actual, err := rs.Rest()
    if err != nil {
        t.Error(err)
    }

    for _, e := range actual {
        fmt.Println(e.Key)
    }

    err = motrds.Delete(newk)
    if err != nil {
        t.Fatal("error calling delete on key ddd ", err)
    }
    


    err = motrds.Delete(k)
    if err != nil {
        t.Fatal("error calling delete on key foo ", err)
    }

    have, err = motrds.Has(k)
    if err != nil {
        t.Fatal("error calling has on key foo after delete", err)
    }

    if have {
        t.Fatal("should have deleted key foo, has returned true")
    }


}
