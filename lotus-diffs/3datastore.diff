diff --git a/go.mod b/go.mod
index 36ea783..62a54b2 100644
--- a/go.mod
+++ b/go.mod
@@ -120,6 +120,7 @@ require (
 	github.com/libp2p/go-maddr-filter v0.1.0
 	github.com/mattn/go-colorable v0.1.6 // indirect
 	github.com/mattn/go-isatty v0.0.12
+	github.com/mengwanguc/go-ds-motr v0.1.5
 	github.com/minio/blake2b-simd v0.0.0-20160723061019-3f5f724cb5b1
 	github.com/mitchellh/go-homedir v1.1.0
 	github.com/multiformats/go-base32 v0.0.3
diff --git a/go.sum b/go.sum
index f9499e2..78a9633 100644
--- a/go.sum
+++ b/go.sum
@@ -1197,6 +1197,8 @@ github.com/mdlayher/netlink v0.0.0-20190828143259-340058475d09/go.mod h1:KxeJAFO
 github.com/mdlayher/netlink v1.0.0/go.mod h1:KxeJAFOFLG6AjpyDkQ/iIhxygIUKD+vcwqcnu43w/+M=
 github.com/mdlayher/netlink v1.1.0/go.mod h1:H4WCitaheIsdF9yOYu8CFmCgQthAPIWZmcKp9uZHgmY=
 github.com/mdlayher/wifi v0.0.0-20190303161829-b1436901ddee/go.mod h1:Evt/EIne46u9PtQbeTx2NTcqURpr5K4SvKtGmBuDPN8=
+github.com/mengwanguc/go-ds-motr v0.1.5 h1:r4B4U3JScTuWjJkUFYo71ujMZ2P9eKRvsmu0XmZMRvE=
+github.com/mengwanguc/go-ds-motr v0.1.5/go.mod h1:Hit+iJOzVs4eq2ki28BNaJjdxVgKQWLeHqw9sToVqLU=
 github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b/go.mod h1:01TrycV0kFyexm33Z7vhZRXopbI8J3TDReVlkTgMUxE=
 github.com/microcosm-cc/bluemonday v1.0.1/go.mod h1:hsXNsILzKxV+sX77C5b8FSuKF00vh2OMYv+xgHpAMF4=
 github.com/miekg/dns v1.0.14/go.mod h1:W1PPwlIAgtquWBMBEV9nkV9Cazfe8ScdGz/Lj7v3Nrg=
diff --git a/node/repo/fsrepo_ds.go b/node/repo/fsrepo_ds.go
index 09fb854..72f0e20 100644
--- a/node/repo/fsrepo_ds.go
+++ b/node/repo/fsrepo_ds.go
@@ -13,17 +13,21 @@ import (
 	badger "github.com/ipfs/go-ds-badger2"
 	levelds "github.com/ipfs/go-ds-leveldb"
 	measure "github.com/ipfs/go-ds-measure"
+	mds "github.com/mengwanguc/go-ds-motr/mds"
+	mio "github.com/mengwanguc/go-ds-motr/mio"
+
+	"strings"
 )
 
 type dsCtor func(path string, readonly bool) (datastore.Batching, error)
 
 var fsDatastores = map[string]dsCtor{
-	"metadata": levelDs,
+	"metadata": motrDs,
 
 	// Those need to be fast for large writes... but also need a really good GC :c
-	"staging": badgerDs, // miner specific
+	"staging": motrDs, // miner specific
 
-	"client": badgerDs, // client specific
+	"client": motrDs, // client specific
 }
 
 func badgerDs(path string, readonly bool) (datastore.Batching, error) {
@@ -44,6 +48,33 @@ func levelDs(path string, readonly bool) (datastore.Batching, error) {
 	})
 }
 
+
+
+var mioConf mio.Config = mio.Config{
+		LocalEP:    "10.230.242.162@tcp:12345:4:1",
+		HaxEP:      "10.230.242.162@tcp:12345:1:1",
+		Profile:    "0x7000000000000001:0x3d",
+		ProcFid:    "0x7200000000000001:0x17",
+		TraceOn:    false,
+		Verbose:    false,
+		ThreadsN:   1,
+	}
+
+var metadataIdx = "0x7800000000000001:123456701"
+var stagingIdx = "0x7800000000000001:123456702"
+var clientIdx = "0x7800000000000001:123456703"
+
+
+func motrDs(path string, readonly bool) (datastore.Batching, error) {
+	if strings.Contains(path, "metadata") {
+		return mds.Open(mioConf, metadataIdx)
+	} else if strings.Contains(path, "staging") {
+		return mds.Open(mioConf, stagingIdx)
+	} else {
+		return mds.Open(mioConf, clientIdx)
+	}
+}
+
 func (fsr *fsLockedRepo) openDatastores(readonly bool) (map[string]datastore.Batching, error) {
 	if err := os.MkdirAll(fsr.join(fsDatastore), 0755); err != nil {
 		return nil, xerrors.Errorf("mkdir %s: %w", fsr.join(fsDatastore), err)
