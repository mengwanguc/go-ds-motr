package mds


import (
    "testing"
    "motr/mio"
    "fmt"

    dstest "github.com/ipfs/go-datastore/test"
    dsq "github.com/ipfs/go-datastore/query"
    ds "github.com/ipfs/go-datastore"
)



// returns datastore, and a function to call on exit.
// So this will be:
//
//   d, done := newDS(t)
//   defer done()
func newDS(t *testing.T) (*MotrDS, func()) {
    config := mio.Config{
        LocalEP:    "10.52.0.244@tcp:12345:33:1000",
        HaxEP:      "10.52.0.244@tcp:12345:34:1",
        Profile:    "0x7000000000000001:0",
        ProcFid:    "0x7200000000000001:64",
        TraceOn:    false,
        Verbose:    false,
        ThreadsN:   1,
    }
    indexID := "0x7800000000000001:123456701"
    motrds, err := Open(config, indexID)
    if err != nil {
        t.Fatal("Failed to open index.. error: ", err)
    }
    return motrds, func() {
        // query
        rs, err := motrds.Query(dsq.Query{Prefix: "/"})
        actual, err := rs.Rest()
        if err != nil {
            t.Fatal(err)
        }

        fmt.Println("actual length", len(actual))

        for _, e := range actual {
            fmt.Println(e.Key)
        }
        motrds.Mkv.Close()
    }
}


func TestBasicOperations(t *testing.T) {
    motrds, done := newDS(t)
    defer done()

    motrds.Delete(ds.NewKey("prefix"))

        rs, err := motrds.Query(dsq.Query{Prefix: "/"})
        actual, err := rs.Rest()
        if err != nil {
            t.Fatal(err)
        }

        fmt.Println("actual length", len(actual))

        for _, e := range actual {
            fmt.Println(e.Key)
        }

    // test from go-datastore
    //    dstest.SubtestBasicPutGet(t, motrds)


//        dstest.SubtestNotFounds(t, motrds)

        dstest.SubtestBasicSync(t, motrds)
}


